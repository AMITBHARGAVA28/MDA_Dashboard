# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Nv8eqnvM_J1n4cIeeKwVrgwbVlYoi0gm
"""

import streamlit as st
import pandas as pd
import networkx as nx
import plotly.graph_objs as go
import plotly.express as px
from collections import defaultdict
from itertools import combinations
from prophet import Prophet
from wordcloud import WordCloud
import matplotlib.pyplot as plt
from datetime import datetime
import io

# Configuration
st.set_page_config(
    layout="wide",
    page_title="Horizon Projects Dashboard",
    page_icon="🌍"
)

# Constants
DEFAULT_MIN_DEGREE = 3
MAX_NODES = 300
USE_APPROXIMATE_ALGORITHMS = True
SAMPLE_SIZE = 100

# Load data with caching
@st.cache_data(ttl=3600, show_spinner="Loading datasets...")
def load_data():
    try:
        org_df = pd.read_csv("horizon_organizations.csv", encoding='latin1')
        proj_df = pd.read_csv("horizon_projects.csv", encoding='latin1')

        # Convert dates
        proj_df['startDate'] = pd.to_datetime(proj_df['startDate'], errors='coerce')
        proj_df['endDate'] = pd.to_datetime(proj_df['endDate'], errors='coerce')
        proj_df['start_year'] = proj_df['startDate'].dt.year

        # Extract geolocation coordinates if available
        if 'geolocation' in org_df.columns:
            org_df[['lat', 'lon']] = org_df['geolocation'].str.split(',', expand=True).astype(float)

        return org_df, proj_df
    except Exception as e:
        st.error(f"Error loading data: {str(e)}")
        return None, None

# Build network graph with caching
@st.cache_data(ttl=3600)
def build_collaboration_network(org_df):
    project_orgs = org_df.groupby('projectID')['organisationID'].apply(set)
    edge_counter = defaultdict(int)

    for orgs in project_orgs:
        for u, v in combinations(sorted(orgs), 2):
            edge_counter[(u, v)] += 1

    G = nx.Graph()
    G.add_edges_from((u, v, {'weight': w}) for (u, v), w in edge_counter.items())
    return G

# Create network visualization
def create_network_visualization(G, min_degree, selected_countries, selected_schemes):
    degrees = dict(G.degree())
    filtered_nodes = [n for n, d in degrees.items() if d >= min_degree]

    if len(filtered_nodes) > MAX_NODES:
        filtered_nodes = sorted(filtered_nodes, key=lambda x: -degrees[x])[:MAX_NODES]

    G_sub = G.subgraph(filtered_nodes).copy()

    if len(G_sub) == 0:
        st.warning("No nodes meet the selected filters. Try adjusting your criteria.")
        return None

    # Calculate centrality measures
    degree_centrality = nx.degree_centrality(G_sub)
    betweenness = nx.betweenness_centrality(G_sub, k=min(SAMPLE_SIZE, len(G_sub)), weight='weight', seed=42)

    # Add node attributes
    org_meta = org_df.drop_duplicates('organisationID').set_index('organisationID')
    meta_dict = org_meta.to_dict('index')

    for node in G_sub.nodes():
        meta = meta_dict.get(node, {})
        G_sub.nodes[node].update({
            'name': meta.get('name', str(node)),
            'country': meta.get('Country', 'Unknown'),
            'role': meta.get('role', 'Unknown'),
            'sme': meta.get('SME', False),
            'degree': degree_centrality.get(node, 0),
            'betweenness': betweenness.get(node, 0)
        })

    # Apply country and scheme filters
    if selected_countries or selected_schemes:
        nodes_to_keep = [
            n for n in G_sub.nodes()
            if (not selected_countries or G_sub.nodes[n]['country'] in selected_countries)
            and (not selected_schemes or org_meta.loc[n]['fundingScheme'] in selected_schemes)
        ]
        G_sub = G_sub.subgraph(nodes_to_keep).copy()

    # Layout
    pos = nx.spring_layout(G_sub, k=0.15, iterations=30, seed=42) if len(G_sub) <= 200 else nx.random_layout(G_sub, seed=42)

    # Create visualization
    edge_x, edge_y = [], []
    for u, v in G_sub.edges():
        x0, y0 = pos[u]
        x1, y1 = pos[v]
        edge_x += [x0, x1, None]
        edge_y += [y0, y1, None]

    edge_trace = go.Scatter(
        x=edge_x, y=edge_y,
        line=dict(width=0.5, color='rgba(150, 150, 150, 0.5)'),
        hoverinfo='none',
        mode='lines'
    )

    node_data = []
    for node in G_sub.nodes():
        node_data.append((
            pos[node][0], pos[node][1],
            f"<b>{G_sub.nodes[node]['name']}</b><br>"
            f"Country: {G_sub.nodes[node]['country']}<br>"
            f"Role: {G_sub.nodes[node]['role']}<br>"
            f"Connections: {degrees.get(node, 0)}<br>"
            f"Betweenness: {G_sub.nodes[node]['betweenness']:.4f}",
            G_sub.nodes[node]['betweenness'],
            5 + (G_sub.nodes[node]['degree'] * 80),
            G_sub.nodes[node]['country'],
            G_sub.nodes[node]['sme']
        ))

    node_x, node_y, text, colors, sizes, countries, smes = zip(*node_data)

    node_trace = go.Scatter(
        x=node_x, y=node_y,
        mode='markers',
        hoverinfo='text',
        text=text,
        marker=dict(
            showscale=True,
            colorscale='Magma',
            color=colors,
            size=sizes,
            colorbar=dict(title='Betweenness'),
            line_width=0.5
        )
    )

    fig = go.Figure(
        data=[edge_trace, node_trace],
        layout=go.Layout(
            title=f"Collaboration Network: {len(G_sub)} Organizations",
            hovermode='closest',
            margin=dict(b=0, l=0, r=0, t=30),
            xaxis=dict(showgrid=False, visible=False),
            yaxis=dict(showgrid=False, visible=False),
            height=700
        )
    )

    return fig

# Generate word cloud
def generate_wordcloud(text):
    wordcloud = WordCloud(width=800, height=400, background_color='white').generate(text)
    img = wordcloud.to_image()
    buf = io.BytesIO()
    img.save(buf, format='PNG')
    return buf

# Main app
def main():
    global org_df, proj_df
    org_df, proj_df = load_data()

    if org_df is None or proj_df is None:
        st.error("Failed to load data")
        return

    # ====================
    # SIDEBAR FILTERS
    # ====================
    with st.sidebar:
        st.header("🌐 Global Filters")

        # Year range
        min_year = int(proj_df['start_year'].min())
        max_year = int(proj_df['start_year'].max())
        year_range = st.slider(
            "Project Start Years",
            min_year, max_year, (min_year, max_year)
        )
        # Country filter
        all_countries = sorted(proj_df['Country Name'].dropna().unique())
        selected_countries = st.multiselect(
            "Filter by Country",
            all_countries,
            default=None)

        # Funding scheme filter
        funding_schemes = sorted(proj_df['fundingScheme'].dropna().unique())
        selected_schemes = st.multiselect(
            "Filter by Funding Scheme",
            funding_schemes,
            default=None)

        # SME filter
        show_sme = st.checkbox("Show SME Participants Only", value=False)

        st.markdown("---")
        st.markdown("### Dashboard Sections")
        tab = st.radio("Navigation", [
            "Network Analysis",
            "Funding Overview",
            "Organization Insights",
            "Project Explorer",
            "Topic Analysis"
        ])

    # Apply global filters
    filtered_proj = proj_df[
        (proj_df['start_year'] >= year_range[0]) &
        (proj_df['start_year'] <= year_range[1])
    ]

    if selected_countries:
        filtered_proj = filtered_proj[filtered_proj['Country Name'].isin(selected_countries)]

    if selected_schemes:
        filtered_proj = filtered_proj[filtered_proj['fundingScheme'].isin(selected_schemes)]

    filtered_org = org_df[org_df['projectID'].isin(filtered_proj['id'])]

    if show_sme:
        filtered_org = filtered_org[filtered_org['SME'] == True]

    # ====================
    # NETWORK ANALYSIS TAB
    # ====================
    if tab == "Network Analysis":
        st.title("🔗 Organization Collaboration Network")

        col1, col2 = st.columns([1, 3])
        with col1:
            min_degree = st.slider(
                "Minimum Connections",
                min_value=1, max_value=20,
                value=DEFAULT_MIN_DEGREE,
                help="Filter organizations with at least this many collaborations"
            )

            st.metric("Total Organizations", len(filtered_org['organisationID'].unique()))
            st.metric("Total Projects", len(filtered_proj))

        with col2:
            G = build_collaboration_network(filtered_org)
            fig = create_network_visualization(
                G, min_degree,
                selected_countries, selected_schemes
            )

            if fig:
                st.plotly_chart(fig, use_container_width=True)
            else:
                st.warning("No data matches your filters")

    # ====================
    # FUNDING OVERVIEW TAB
    # ====================
    elif tab == "Funding Overview":
        st.title("💰 Funding Distribution Analysis")

        tab1, tab2 = st.tabs(["Treemap View", "Timeline View"])

        with tab1:
            st.subheader("Funding Distribution by Country and Topic")
            fig = px.treemap(
                filtered_proj,
                path=['Country Name', 'topic_label'],
                values='ecMaxContribution',
                color='ecMaxContribution',
                hover_data=['title'],
                color_continuous_scale='Blues'
            )
            st.plotly_chart(fig, use_container_width=True)

        with tab2:
            st.subheader("Project Timeline")
            timeline_df = filtered_proj[['title', 'startDate', 'endDate', 'ecMaxContribution', 'Country Name']].copy()
            fig = px.timeline(
                timeline_df,
                x_start="startDate",
                x_end="endDate",
                y="title",
                color="Country Name",
                hover_name="title",
                hover_data=["ecMaxContribution"],
                title="Project Timeline"
            )
            st.plotly_chart(fig, use_container_width=True)

    # ====================
    # ORGANIZATION INSIGHTS TAB
    # ====================
    elif tab == "Organization Insights":
        st.title("🏛️ Organization Participation Analysis")

        col1, col2 = st.columns(2)
        with col1:
            st.subheader("SME Participation")
            sme_analysis = filtered_org.groupby('SME').agg(
                total_projects=('projectID', 'nunique'),
                total_funding=('ecContribution', 'sum')
            ).reset_index()

            fig = px.pie(
                sme_analysis,
                values='total_funding',
                names='SME',
                title="Funding Distribution by SME Status"
            )
            st.plotly_chart(fig, use_container_width=True)

        with col2:
            st.subheader("Organization Roles")
            role_analysis = filtered_org.groupby('role').agg(
                total_funding=('ecContribution', 'sum'),
                project_count=('projectID', 'nunique')
            ).reset_index()

            fig = px.bar(
                role_analysis,
                x='role',
                y='total_funding',
                color='role',
                title="Funding by Organization Role"
            )
            st.plotly_chart(fig, use_container_width=True)

    # ====================
    # PROJECT EXPLORER TAB
    # ====================
    elif tab == "Project Explorer":
        st.title("🔍 Project Explorer")

        # Key metrics
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("Total Funding", f"€{filtered_proj['ecMaxContribution'].sum():,}")
        with col2:
            st.metric("Average Funding", f"€{filtered_proj['ecMaxContribution'].mean():,.0f}")
        with col3:
            st.metric("Projects Count", len(filtered_proj))

        # Interactive table
        with st.expander("📋 View Project Details"):
            st.dataframe(
                filtered_proj[[
                    'title', 'Country Name', 'topic_label',
                    'startDate', 'endDate', 'ecMaxContribution'
                ]],
                column_config={
                    "title": "Project Title",
                    "ecMaxContribution": st.column_config.NumberColumn(
                        "Funding (€)",
                        format="€%d"
                    ),
                    "startDate": "Start Date",
                    "endDate": "End Date"
                },
                use_container_width=True,
                height=500
            )

    # ====================
    # TOPIC ANALYSIS TAB
    # ====================
    elif tab == "Topic Analysis":
        st.title("📊 Topic Analysis")

        selected_topic = st.selectbox(
            "Select a research topic",
            filtered_proj['topic_label'].unique()
        )

        col1, col2 = st.columns([2, 1])
        with col1:
            st.subheader(f"Funding Trend for {selected_topic}")
            topic_trend = filtered_proj[filtered_proj['topic_label'] == selected_topic]
            topic_trend = topic_trend.groupby('start_year').agg(
                total_funding=('ecMaxContribution', 'sum'),
                project_count=('id', 'count')
            ).reset_index()

            fig = px.line(
                topic_trend,
                x='start_year',
                y='total_funding',
                markers=True,
                title=f"Funding Trend for {selected_topic}"
            )
            st.plotly_chart(fig, use_container_width=True)

        with col2:
            st.subheader("Topic Word Cloud")
            topic_text = " ".join(
                filtered_proj[filtered_proj['topic_label'] == selected_topic]['cleaned_text']
            )

            if topic_text.strip():
                wordcloud = generate_wordcloud(topic_text)
                st.image(wordcloud, use_column_width=True)
            else:
                st.warning("No text data available for this topic")

if __name__ == "__main__":
    main()
